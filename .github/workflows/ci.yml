name: CI

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Native compilation for different targets
          - target: x86_64-unknown-linux-gnu
            os_name: linux-x86_64
          - target: x86_64-pc-windows-gnu
            os_name: windows-x86_64
          - target: aarch64-unknown-linux-gnu
            os_name: linux-aarch64
          - target: armv7-unknown-linux-gnueabihf
            os_name: linux-armv7
          # Android targets
          - target: aarch64-linux-android
            os_name: android-aarch64
          - target: armv7-linux-androideabi
            os_name: android-armv7
          - target: x86_64-linux-android
            os_name: android-x86_64
          - target: i686-linux-android
            os_name: android-i686

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.target != 'x86_64-unknown-linux-gnu'
      run: |
        if [[ "${{ matrix.target }}" == *"android"* ]]; then
          sudo apt-get update
          sudo apt-get install -y unzip
          wget -q https://dl.google.com/android/repository/android-ndk-r27d-linux.zip
          unzip -q android-ndk-r27d-linux.zip
          echo "ANDROID_NDK_HOME=$PWD/android-ndk-r27d" >> $GITHUB_ENV
          echo "$PWD/android-ndk-r27d/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
        elif [[ "${{ matrix.target }}" == *"arm"* ]] || [[ "${{ matrix.target }}" == *"aarch64"* ]]; then
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf gcc-aarch64-linux-gnu
        fi

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-target-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-target-${{ matrix.target }}-

    - name: Run cargo check
      run: cargo check --workspace --all-targets --target ${{ matrix.target }}

    - name: Run tests (native targets only)
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: cargo test --workspace --target ${{ matrix.target }}

    - name: Build examples
      run: |
        # Build core examples for all targets
        cargo build --example record_response --target ${{ matrix.target }}
        cargo build --example complex_return --target ${{ matrix.target }}
        cargo build --example variant_return --target ${{ matrix.target }}
        cargo build --example func_param --target ${{ matrix.target }}
        cargo build --example string_host_guest --target ${{ matrix.target }}

        # Build additional examples for native targets
        if [[ "${{ matrix.target }}" == "x86_64-unknown-linux-gnu" ]]; then
          cargo build --example guest_resource --target ${{ matrix.target }}
          cargo build --example multilevel_resource --target ${{ matrix.target }}
          cargo build --example option_result --target ${{ matrix.target }}
          cargo build --example resource --target ${{ matrix.target }}
          cargo build --example single_component --target ${{ matrix.target }}
        fi

    - name: Run example tests (native Linux only)
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        cargo run --example record_response
        cargo run --example complex_return
        cargo run --example variant_return
        cargo run --example func_param
        cargo run --example string_host_guest

  wasm-test:
    name: WebAssembly Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown,wasm32-wasi

    - name: Install wasm-tools
      run: |
        curl -L https://github.com/bytecodealliance/wasm-tools/releases/download/v1.0.53/wasm-tools-1.0.53-x86_64-linux.tar.gz | tar xzf -
        sudo mv wasm-tools-1.0.53-x86_64-linux/wasm-tools /usr/local/bin/

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ubuntu-wasm-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-wasm-cargo-

    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ubuntu-wasm-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-wasm-target-

    - name: Build WebAssembly examples
      run: |
        # Use bash scripts for cross-platform compatibility
        cd examples/complex_return && chmod +x build.sh && ./build.sh
        cd ../variant_return && chmod +x build.sh && ./build.sh
        cd ../record_response && chmod +x build.sh && ./build.sh
        cd ../func_param && chmod +x build.sh && ./build.sh
        cd ../string_host_guest && chmod +x build.sh && ./build.sh
        cd ../single_component && chmod +x build.sh && ./build.sh
        cd ../guest_resource && chmod +x build.sh && ./build.sh
        cd ../multilevel_resource && chmod +x build.sh && ./build.sh
        cd ../option_result && chmod +x build.sh && ./build.sh
        cd ../resource && chmod +x build.sh && ./build.sh

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ubuntu-lint-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-lint-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --workspace --all-targets -- -D warnings

  audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit