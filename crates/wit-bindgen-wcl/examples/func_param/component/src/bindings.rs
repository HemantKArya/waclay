// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod test {
    pub mod guest {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod host {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone, Copy)]
            pub enum ClickType {
                Up,
                Press(u8),
                Down,
            }
            impl ::core::fmt::Debug for ClickType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ClickType::Up => f.debug_tuple("ClickType::Up").finish(),
                        ClickType::Press(e) => {
                            f.debug_tuple("ClickType::Press").field(e).finish()
                        }
                        ClickType::Down => f.debug_tuple("ClickType::Down").finish(),
                    }
                }
            }
            #[derive(Clone, Copy)]
            pub enum Event {
                Open,
                Close(u64),
                Click(ClickType),
            }
            impl ::core::fmt::Debug for Event {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Event::Open => f.debug_tuple("Event::Open").finish(),
                        Event::Close(e) => {
                            f.debug_tuple("Event::Close").field(e).finish()
                        }
                        Event::Click(e) => {
                            f.debug_tuple("Event::Click").field(e).finish()
                        }
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn param_list(param_s16: &[i16]) -> () {
                unsafe {
                    let vec0 = param_s16;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "test:guest/host")]
                    unsafe extern "C" {
                        #[link_name = "param-list"]
                        fn wit_import1(_: *mut u8, _: usize);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0.cast_mut(), len0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn param_record(param_record: Event) -> () {
                unsafe {
                    let (result1_0, result1_1, result1_2) = match param_record {
                        Event::Open => (0i32, 0i64, 0i32),
                        Event::Close(e) => (1i32, _rt::as_i64(e), 0i32),
                        Event::Click(e) => {
                            let (result0_0, result0_1) = match e {
                                ClickType::Up => (0i32, 0i32),
                                ClickType::Press(e) => (1i32, _rt::as_i32(e)),
                                ClickType::Down => (2i32, 0i32),
                            };
                            (2i32, i64::from(result0_0), result0_1)
                        }
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "test:guest/host")]
                    unsafe extern "C" {
                        #[link_name = "param-record"]
                        fn wit_import2(_: i32, _: i64, _: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: i32, _: i64, _: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import2(result1_0, result1_1, result1_2) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn param_option(param_option: Option<u16>) -> () {
                unsafe {
                    let (result0_0, result0_1) = match param_option {
                        Some(e) => (1i32, _rt::as_i32(e)),
                        None => (0i32, 0i32),
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "test:guest/host")]
                    unsafe extern "C" {
                        #[link_name = "param-option"]
                        fn wit_import1(_: i32, _: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32, _: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import1(result0_0, result0_1) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn param_result_all(result_all: Result<u8, u8>) -> () {
                unsafe {
                    let (result0_0, result0_1) = match result_all {
                        Ok(e) => (0i32, _rt::as_i32(e)),
                        Err(e) => (1i32, _rt::as_i32(e)),
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "test:guest/host")]
                    unsafe extern "C" {
                        #[link_name = "param-result-all"]
                        fn wit_import1(_: i32, _: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32, _: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import1(result0_0, result0_1) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn param_result_ok(result_ok: Result<u8, ()>) -> () {
                unsafe {
                    let (result0_0, result0_1) = match result_ok {
                        Ok(e) => (0i32, _rt::as_i32(e)),
                        Err(_) => (1i32, 0i32),
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "test:guest/host")]
                    unsafe extern "C" {
                        #[link_name = "param-result-ok"]
                        fn wit_import1(_: i32, _: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32, _: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import1(result0_0, result0_1) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn param_result_err(result_err: Result<(), u8>) -> () {
                unsafe {
                    let (result0_0, result0_1) = match result_err {
                        Ok(_) => (0i32, 0i32),
                        Err(e) => (1i32, _rt::as_i32(e)),
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "test:guest/host")]
                    unsafe extern "C" {
                        #[link_name = "param-result-err"]
                        fn wit_import1(_: i32, _: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32, _: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import1(result0_0, result0_1) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn param_result_none(result_none: Result<(), ()>) -> () {
                unsafe {
                    let result0 = match result_none {
                        Ok(_) => 0i32,
                        Err(_) => 1i32,
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "test:guest/host")]
                    unsafe extern "C" {
                        #[link_name = "param-result-none"]
                        fn wit_import1(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import1(result0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn param_mult(
                param_list: &[_rt::String],
                param_record: Event,
                param_option: Option<&str>,
                result_all: Result<&str, &str>,
            ) -> () {
                unsafe {
                    let vec1 = param_list;
                    let len1 = vec1.len();
                    let layout1 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec1.len() * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result1 = if layout1.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout1).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout1);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec1.into_iter().enumerate() {
                        let base = result1
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let vec0 = e;
                            let ptr0 = vec0.as_ptr().cast::<u8>();
                            let len0 = vec0.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len0;
                            *base.add(0).cast::<*mut u8>() = ptr0.cast_mut();
                        }
                    }
                    let (result3_0, result3_1, result3_2) = match param_record {
                        Event::Open => (0i32, 0i64, 0i32),
                        Event::Close(e) => (1i32, _rt::as_i64(e), 0i32),
                        Event::Click(e) => {
                            let (result2_0, result2_1) = match e {
                                ClickType::Up => (0i32, 0i32),
                                ClickType::Press(e) => (1i32, _rt::as_i32(e)),
                                ClickType::Down => (2i32, 0i32),
                            };
                            (2i32, i64::from(result2_0), result2_1)
                        }
                    };
                    let (result5_0, result5_1, result5_2) = match param_option {
                        Some(e) => {
                            let vec4 = e;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            (1i32, ptr4.cast_mut(), len4)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let (result8_0, result8_1, result8_2) = match result_all {
                        Ok(e) => {
                            let vec6 = e;
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            (0i32, ptr6.cast_mut(), len6)
                        }
                        Err(e) => {
                            let vec7 = e;
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            (1i32, ptr7.cast_mut(), len7)
                        }
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "test:guest/host")]
                    unsafe extern "C" {
                        #[link_name = "param-mult"]
                        fn wit_import9(
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i64,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import9(
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i64,
                        _: i32,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import9(
                            result1,
                            len1,
                            result3_0,
                            result3_1,
                            result3_2,
                            result5_0,
                            result5_1,
                            result5_2,
                            result8_0,
                            result8_1,
                            result8_2,
                        )
                    };
                    if layout1.size() != 0 {
                        _rt::alloc::dealloc(result1.cast(), layout1);
                    }
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod test {
        pub mod guest {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod run {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_start_cabi<T: Guest>() {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::start();
                }
                pub trait Guest {
                    fn start() -> ();
                }
                #[doc(hidden)]
                macro_rules! __export_test_guest_run_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name = "test:guest/run#start")]
                        unsafe extern "C" fn export_start() { unsafe {
                        $($path_to_types)*:: _export_start_cabi::<$ty > () } } };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_test_guest_run_cabi;
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::alloc;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_guest_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::test::guest::run::__export_test_guest_run_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::test::guest::run);
    };
}
#[doc(inline)]
pub(crate) use __export_guest_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:test:guest:guest:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 682] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xae\x04\x01A\x02\x01\
A\x04\x01B\x1f\x01p|\x01r\x02\x05labels\x05sides\0\x04\0\x04rect\x03\0\x01\x01q\x03\
\x02up\0\0\x05press\x01}\0\x04down\0\0\x04\0\x0aclick-type\x03\0\x03\x01q\x03\x04\
open\0\0\x05close\x01w\0\x05click\x01\x04\0\x04\0\x05event\x03\0\x05\x01@\x01\x09\
param-s16\0\x01\0\x04\0\x0aparam-list\x01\x07\x01@\x01\x0cparam-record\x06\x01\0\
\x04\0\x0cparam-record\x01\x08\x01k{\x01@\x01\x0cparam-option\x09\x01\0\x04\0\x0c\
param-option\x01\x0a\x01j\x01}\x01}\x01@\x01\x0aresult-all\x0b\x01\0\x04\0\x10pa\
ram-result-all\x01\x0c\x01j\x01}\0\x01@\x01\x09result-ok\x0d\x01\0\x04\0\x0fpara\
m-result-ok\x01\x0e\x01j\0\x01}\x01@\x01\x0aresult-err\x0f\x01\0\x04\0\x10param-\
result-err\x01\x10\x01j\0\0\x01@\x01\x0bresult-none\x11\x01\0\x04\0\x11param-res\
ult-none\x01\x12\x01ps\x01ks\x01j\x01s\x01s\x01@\x04\x0aparam-list\x13\x0cparam-\
record\x06\x0cparam-option\x14\x0aresult-all\x15\x01\0\x04\0\x0aparam-mult\x01\x16\
\x03\0\x0ftest:guest/host\x05\0\x01B\x02\x01@\0\x01\0\x04\0\x05start\x01\0\x04\0\
\x0etest:guest/run\x05\x01\x04\0\x10test:guest/guest\x04\0\x0b\x0b\x01\0\x05gues\
t\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\x10\
wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
